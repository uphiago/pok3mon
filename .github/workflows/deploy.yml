name: Lint - Test - Build - Push

on:
  push:
    branches: [main]      # CI/CD on merge to main
  pull_request:           # Quality checks for PRs
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
# QUALITY
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Node.js 20 and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: pok3mon/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: pok3mon

      - name: Run ESLint (JSON output)
        run: npm run lint:ci
        working-directory: pok3mon

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: pok3mon/eslint-report.json
          retention-days: 7

      - name: Execute Vitest with coverage
        run: npm run test:ci
        working-directory: pok3mon

      - name: Upload Vitest results and coverage
        uses: actions/upload-artifact@v4
        with:
          name: vitest-results
          path: |
            pok3mon/vitest-report.json
            pok3mon/coverage/
          retention-days: 7

# BUILD & PUSH
  build-push:
    needs: quality # runs on successful lint + test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialise Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./pok3mon
          file: ./pok3mon/Dockerfile
          build-args: BASE_PATH=/pok3mon/
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

# DEPLOY com DEBUG
  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read

    environment: development

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Test AWS SSM connectivity
      shell: bash
      run: |
        echo "Testing AWS connectivity and instance status..."
        aws ssm describe-instance-information \
          --instance-information-filter-list key=InstanceIds,valueSet=${{ secrets.INSTANCE_ID }} \
          --query 'InstanceInformationList[0].{InstanceId:InstanceId,Status:PingStatus,LastPingDateTime:LastPingDateTime,AgentVersion:AgentVersion}'

    - name: Trigger remote deploy via SSM with enhanced error handling
      id: ssm
      shell: bash
      run: |
        set -euo pipefail

        IMAGE_TAG="sha-${{ github.sha }}"
        REPO="uphiago/pok3mon"
        GIT_SHA="${{ github.sha }}"

        # Create payload with better error handling
        PAYLOAD=$(mktemp)
        cat >"$PAYLOAD" <<EOF
        {
          "commands": [
            "set -euo pipefail",
            "echo '=== Starting deployment at \$(date) ==='",
            "echo 'Current directory: \$(pwd)'",
            "echo 'Available disk space:'",
            "df -h",
            "echo 'Docker status:'",
            "docker --version || echo 'Docker not found'",
            "docker compose version || echo 'Docker Compose not found'",
            "echo 'Downloading docker-compose.yml...'",
            "curl -sSf -o docker-compose.yml https://raw.githubusercontent.com/${REPO}/${GIT_SHA}/pok3mon/docker-compose.yml",
            "echo 'Docker compose file downloaded successfully'",
            "cat docker-compose.yml",
            "echo 'Logging into GHCR...'",
            "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin",
            "echo 'Login successful, setting IMAGE_TAG=${IMAGE_TAG}'",
            "export IMAGE_TAG=${IMAGE_TAG}",
            "echo 'Pulling images...'",
            "docker compose pull",
            "echo 'Starting containers...'",
            "docker compose up -d --pull always",
            "echo 'Deployment completed successfully at \$(date)'",
            "echo 'Running containers:'",
            "docker compose ps"
          ]
        }
        EOF

        echo "Sending SSM command..."
        CMD_ID=$(aws ssm send-command \
          --instance-ids  "${{ secrets.INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment       "deploy pok3mon ${IMAGE_TAG} with debug" \
          --parameters    file://"$PAYLOAD" \
          --timeout-seconds 300 \
          --output text   --query 'Command.CommandId')

        echo "Command ID: ${CMD_ID}"
        echo "COMMAND_ID=${CMD_ID}" >>"$GITHUB_OUTPUT"

    - name: Monitor SSM command execution
      shell: bash
      run: |
        CMD_ID="${{ steps.ssm.outputs.COMMAND_ID }}"
        echo "Monitoring command execution: ${CMD_ID}"
        
        # Wait for command to complete (with timeout)
        timeout 300 aws ssm wait command-executed \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${CMD_ID}" || true

        # Get command status and output regardless of success/failure
        echo "=== COMMAND STATUS ==="
        aws ssm get-command-invocation \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${CMD_ID}" \
          --query '{Status:Status,StatusDetails:StatusDetails,StandardOutputContent:StandardOutputContent,StandardErrorContent:StandardErrorContent}' \
          --output table

    - name: Get detailed SSM command results
      shell: bash
      if: always()  # Run this step even if previous steps failed
      run: |
        CMD_ID="${{ steps.ssm.outputs.COMMAND_ID }}"
        echo "=== DETAILED COMMAND OUTPUT ==="
        
        # Get the full output
        aws ssm get-command-invocation \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${CMD_ID}" \
          --output json > command_result.json
        
        # Show the JSON result
        cat command_result.json | jq '.'
        
        # Extract and show stdout
        echo "=== STANDARD OUTPUT ==="
        cat command_result.json | jq -r '.StandardOutputContent // "No stdout"'
        
        # Extract and show stderr  
        echo "=== STANDARD ERROR ==="
        cat command_result.json | jq -r '.StandardErrorContent // "No stderr"'
        
        # Show status
        STATUS=$(cat command_result.json | jq -r '.Status')
        echo "=== FINAL STATUS: ${STATUS} ==="
        
        # Exit with error if command failed
        if [ "$STATUS" = "Failed" ]; then
          echo "Command execution failed!"
          exit 1
        fi

    - name: Verify deployment (if successful)
      shell: bash
      if: success()
      run: |
        echo "Verifying deployment..."
        
        VERIFY_PAYLOAD=$(mktemp)
        cat >"$VERIFY_PAYLOAD" <<EOF
        {
          "commands": [
            "echo '=== Deployment Verification ==='",
            "docker compose ps",
            "docker compose logs --tail=50",
            "echo '=== Container Health ==='",
            "docker compose ps --format table"
          ]
        }
        EOF

        VERIFY_CMD_ID=$(aws ssm send-command \
          --instance-ids  "${{ secrets.INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment       "verify pok3mon deployment" \
          --parameters    file://"$VERIFY_PAYLOAD" \
          --output text   --query 'Command.CommandId')

        # Wait and show verification results
        aws ssm wait command-executed \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${VERIFY_CMD_ID}"
        
        echo "=== VERIFICATION RESULTS ==="
        aws ssm get-command-invocation \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${VERIFY_CMD_ID}" \
          --query 'StandardOutputContent' \
          --output text