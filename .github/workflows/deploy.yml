name: Lint - Test - Build image

on:
  push:
    branches: [main]      # CI/CD on merge to main
  pull_request:           # Quality checks for PRs
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
# QUALITY
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Node.js 20 and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: pok3mon/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: pok3mon

      - name: Run ESLint (JSON output)
        run: npm run lint:ci
        working-directory: pok3mon

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: pok3mon/eslint-report.json
          retention-days: 7

      - name: Execute Vitest with coverage
        run: npm run test:ci
        working-directory: pok3mon

      - name: Upload Vitest results and coverage
        uses: actions/upload-artifact@v4
        with:
          name: vitest-and-coverage
          path: |
            pok3mon/vitest-report.xml
            pok3mon/coverage/
          retention-days: 7

# BUILD & PUSH
  build-push:
    needs: quality # runs on successful lint + test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialise Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./pok3mon
          file: ./pok3mon/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
