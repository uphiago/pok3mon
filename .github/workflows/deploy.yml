name: Lint - Test - Build - Push

on:
  push:
    branches: [main]      # CI/CD on merge to main
  pull_request:           # Quality checks for PRs
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
# QUALITY
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Node.js 20 and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: pok3mon/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: pok3mon

      - name: Run ESLint (JSON output)
        run: npm run lint:ci
        working-directory: pok3mon

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: pok3mon/eslint-report.json
          retention-days: 7

      - name: Execute Vitest with coverage
        run: npm run test:ci
        working-directory: pok3mon

      - name: Upload Vitest results and coverage
        uses: actions/upload-artifact@v4
        with:
          name: vitest-results
          path: |
            pok3mon/vitest-report.json
            pok3mon/coverage/
          retention-days: 7

# BUILD & PUSH
  build-push:
    needs: quality # runs on successful lint + test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialise Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./pok3mon
          file: ./pok3mon/Dockerfile
          build-args: BASE_PATH=/pok3mon/
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

# DEPLOY
  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    environment: development

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Trigger remote deploy via SSM
      id: ssm
      shell: bash
      run: |
        IMAGE_TAG="sha-${{ github.sha }}"
        CMD=$(aws ssm send-command \
          --instance-ids  "${{ secrets.INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "deploy pok3mon $IMAGE_TAG" \
          --parameters '{
            "commands": [
              "set -euo pipefail",
              "export IMAGE_TAG='"$IMAGE_TAG"'",
              "cd /home/deploy/",
              "sudo -u deploy -E docker compose -f docker-compose.yml pull",
              "sudo -u deploy -E docker compose -f docker-compose.yml up -d"
            ]
          }' \
          --output text --query "Command.CommandId")
        echo "COMMAND_ID=$CMD" | tee -a "$GITHUB_OUTPUT"

    - name: Wait for SSM to finish
      shell: bash
      run: |
        aws ssm wait command-executed \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${{ steps.ssm.outputs.COMMAND_ID }}"
        aws ssm get-command-invocation \
          --instance-id "${{ secrets.INSTANCE_ID }}" \
          --command-id  "${{ steps.ssm.outputs.COMMAND_ID }}"
